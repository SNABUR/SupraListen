# Crystara Project Context

## 1. Project Purpose

Crystara is a decentralized application (DEX) and launchpad for memecoins, operating on the Supra blockchain. Its primary function is to allow users to trade tokens and to provide real-time and historical price charting for these assets.

## 2. Core Technologies

- **Framework:** Next.js
- **Language:** TypeScript
- **ORM:** Prisma
- **Database:** PostgreSQL (managed via Supabase)
- **Real-time Functionality:** Supabase Realtime

## 3. Key Architectural Concepts

The application is designed to efficiently handle both real-time data and historical data aggregation for charting purposes. The data flow is divided into three main stages:

### a. Data Ingestion (The Indexer)

- **Location:** `app/indexer/`
- **Function:** An indexer service continuously polls an RPC endpoint of the Supra blockchain to fetch new events, such as trades.
- **Components:**
    - `poller.ts`: The main loop that checks for new blocks.
    - `rpcClient.ts`: Responsible for making the actual API calls to the RPC endpoint.
    - `eventProcessor.ts`: Receives raw events from the poller and routes them to the appropriate handler.
    - `handlers/*.ts`: Specific logic for each type of event. For example, `tradeEventHandler.ts` processes new trades.
- **Outcome:** Raw, unprocessed event data is saved into the database. For trades, this is the `TradeEvent` table.

### b. Data Processing (Background Tasks)

- **Location:** `lib/tasks/`
- **Function:** These are scripts designed to run periodically in the background to process the raw data and convert it into an aggregated, more efficient format.
- **Key Script:** `executeProcessOHLC.ts`
    - This script reads new, unprocessed trades from the `TradeEvent` table.
    - It groups these trades into time-based buckets (e.g., 1-minute intervals).
    - It calculates the Open, High, Low, and Close (OHLC) values, as well as the total volume for each interval.
- **Outcome:** The aggregated data is saved into the `token_price_history` table. This table is optimized for fast chart data queries.

### c. Data Consumption (Frontend)

- **Location:** `app/` (Next.js pages/components)
- **Function:** The user interface consumes data from the database in two distinct ways:
    - **Historical Chart Data:** When a user loads a price chart, the application performs a fast query on the `token_price_history` table to fetch the aggregated OHLC data. This is highly efficient as it avoids loading thousands of individual trades.
    - **Real-time Updates:** The frontend uses **Supabase Realtime** to subscribe to changes in the `TradeEvent` table. This allows the UI to:
        - Display a live feed of the latest trades.
        - Update the current price in real-time.
        - Dynamically update the most recent (currently forming) candle on the price chart without needing to reload all the historical data.
